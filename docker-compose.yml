# ==========================================================
# docker-compose.yml para Stock Advisor (desarrollo)
# ==========================================================

services:
  # ==========================================================
  # BASE DE DATOS: CockroachDB (modo inseguro para desarrollo)
  # ==========================================================
  cockroach:
    # Imagen oficial de CockroachDB con versión específica para estabilidad
    image: cockroachdb/cockroach:latest-v25.1
    container_name: cockroach
    ports:
      - "${COCKROACH_SQL_PORT:-26257}:26257"  # Puerto SQL para conexiones a la base de datos
      - "${COCKROACH_UI_PORT:-9090}:8080"     # Puerto para la interfaz web de administración
    command: start-single-node --insecure
    volumes:
      # Volumen persistente para evitar pérdida de datos al reiniciar
      - cockroach-data:/cockroach/cockroach-data
    networks:
      - stock-network
    # Verificación de salud para que otros servicios sepan cuándo está listo
    healthcheck:
      test: ["CMD", "cockroach", "node", "status", "--insecure"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # ==========================================================
  # INICIALIZACIÓN DE BASE DE DATOS
  # ==========================================================
  db-init:
    # Usamos la misma imagen para consistencia
    image: cockroachdb/cockroach:latest-v25.1
    container_name: db-init
    depends_on:
      # Solo inicia cuando CockroachDB está disponible
      cockroach:
        condition: service_healthy
    volumes:
      - ./sql/init-db.sql:/init-db.sql
    # Comando para crear la base de datos y configurar usuario con privilegios limitados
    command: >
      sql --insecure --host=cockroach --file=/init-db.sql
    networks:
      - stock-network
    # Reintentar automáticamente si falla
    restart: on-failure

  # ==========================================================
  # BACKEND: API de Stock Advisor
  # ==========================================================
  backend:
    # Construye la imagen desde el Dockerfile en la carpeta del backend
    build:
      context: ./repositories/stock-advisor-backend
      dockerfile: Dockerfile
    container_name: stock-advisor-backend
    ports:
      - "${BACKEND_PORT:-8080}:8080"  # Expone la API en el puerto 8080
    depends_on:
      # Solo inicia cuando la base de datos está inicializada
      - db-init
    environment:
      # Variables de entorno para configurar el backend
      - ADDRESS=:8080
      # Conexión en modo inseguro para desarrollo
      - DATABASE_URL=postgresql://${DB_USER:-stock_user}@cockroach:26257/${DB_NAME:-stock_db}?sslmode=disable
      - STOCK_API_URL=${STOCK_API_URL:-https://8j5baasof2.execute-api.us-west-2.amazonaws.com/production/swechallenge/list}
      - STOCK_AUTH_TKN=${STOCK_AUTH_TKN:-demo_token}
      - SYNC_MAX_ITERATIONS=${SYNC_MAX_ITERATIONS:-100}
      - SYNC_TIMEOUT=${SYNC_TIMEOUT:-60}
      # Orígenes permitidos para CORS (importante para comunicación con frontend)
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:5173,http://frontend:5173,http://127.0.0.1:5173}
    networks:
      - stock-network
    restart: on-failure

  # ==========================================================
  # FRONTEND: Interfaz web de Stock Advisor
  # ==========================================================
  frontend:
    # Construye la imagen desde el Dockerfile en la carpeta del frontend
    build:
      context: ./repositories/stock-advisor-frontend
      dockerfile: Dockerfile
      args:
        # Pasar la URL de la API como argumento durante la construcción
        - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:${BACKEND_PORT:-8080}}
        - VITE_DEFAULT_LANGUAGE=${VITE_DEFAULT_LANGUAGE:-EN}
    container_name: stock-advisor-frontend
    ports:
      - "${FRONTEND_PORT:-5173}:5173"  # Expone la UI en el puerto 5173
    environment:
      # Variables de entorno para el frontend (runtime)
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:${BACKEND_PORT:-8080}}
      - VITE_DEFAULT_LANGUAGE=${VITE_DEFAULT_LANGUAGE:-EN}
    depends_on:
      # Solo inicia cuando el backend está disponible
      - backend
    networks:
      - stock-network
    restart: on-failure

# ==========================================================
# VOLÚMENES PERSISTENTES
# ==========================================================
volumes:
  # Volumen para datos de CockroachDB
  cockroach-data:
    # Volumen nombrado que persiste aún después de docker-compose down
    # (a menos que uses docker-compose down -v)

# ==========================================================
# REDES
# ==========================================================
networks:
  # Red para comunicación entre contenedores
  stock-network:
    driver: bridge