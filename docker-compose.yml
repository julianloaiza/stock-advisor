version: '3.8'

services:
  # ==========================================================
  # Servicio para generar los certificados SSL/TLS
  # ==========================================================
  cockroach-certs:
    image: cockroachdb/cockroach:latest-v25.1
    container_name: cockroach-certs
    volumes:
      - cockroach-certs:/certs
      - ./scripts/certificates/generate-certs.sh:/generate-certs.sh
    command: /generate-certs.sh
    networks:
      - stock-network

  # ==========================================================
  # BASE DE DATOS: CockroachDB (versión segura con SSL/TLS)
  # ==========================================================
  cockroach:
    # Imagen oficial de CockroachDB con versión específica para estabilidad
    image: cockroachdb/cockroach:latest-v25.1
    container_name: cockroach
    ports:
      - "26257:26257"  # Puerto SQL para conexiones a la base de datos
      - "9090:9090"    # Puerto para la interfaz web de administración
    command: >
      start-single-node
      --advertise-addr=cockroach
      --listen-addr=0.0.0.0
      --http-addr=0.0.0.0:9090
      --certs-dir=/certs
    volumes:
      # Volumen persistente para evitar pérdida de datos al reiniciar
      - cockroach-data:/cockroach/cockroach-data
      # Volumen para certificados SSL/TLS
      - cockroach-certs:/certs
    networks:
      - stock-network
    # Verificación de salud para que otros servicios sepan cuándo está listo
    healthcheck:
      test: ["CMD", "cockroach", "node", "status", "--certs-dir=/certs"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      - cockroach-certs

  # ==========================================================
  # INICIALIZACIÓN DE BASE DE DATOS (con seguridad mejorada)
  # ==========================================================
  db-init:
    # Usamos la misma imagen pero con conexión segura
    image: cockroachdb/cockroach:latest-v25.1
    container_name: db-init
    depends_on:
      # Solo inicia cuando CockroachDB está disponible
      - cockroach
    volumes:
      - ./config/sql/init-db.sql:/init-db.sql
      - cockroach-certs:/certs
    # Comando para crear la base de datos y configurar usuario con privilegios limitados
    command: >
      sql --certs-dir=/certs --host=cockroach --execute="$(cat /init-db.sql)"
    networks:
      - stock-network
    # Reintentar automáticamente si falla
    restart: on-failure

  # ==========================================================
  # BACKEND: API de Stock Advisor (con conexión segura a BD)
  # ==========================================================
  backend:
    # Construye la imagen desde el Dockerfile en la carpeta del backend
    build:
      context: ./repositories/stock-advisor-backend
      dockerfile: Dockerfile
    container_name: stock-advisor-backend
    ports:
      - "8080:8080"  # Expone la API en el puerto 8080
    depends_on:
      # Solo inicia cuando la base de datos está inicializada
      - db-init
    environment:
      # Variables de entorno para configurar el backend
      - ADDRESS=:8080
      # Conexión segura con certificados SSL/TLS
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@cockroach:26257/stock_db?sslmode=verify-ca&sslrootcert=/certs/ca.crt&sslcert=/certs/client.${DB_USER}.crt&sslkey=/certs/client.${DB_USER}.key
      - STOCK_API_URL=https://8j5baasof2.execute-api.us-west-2.amazonaws.com/production/swechallenge/list
      - STOCK_AUTH_TKN=${STOCK_AUTH_TKN}
      - SYNC_MAX_ITERATIONS=100
      - SYNC_TIMEOUT=100
      # Orígenes permitidos para CORS (importante para comunicación con frontend)
      - CORS_ALLOWED_ORIGINS=http://localhost:5173,http://frontend:5173,http://127.0.0.1:5173
    volumes:
      # Montar certificados SSL/TLS en modo solo lectura
      - cockroach-certs:/certs:ro
    networks:
      - stock-network
    restart: on-failure

  # ==========================================================
  # FRONTEND: Interfaz web de Stock Advisor
  # ==========================================================
  frontend:
    # Construye la imagen desde el Dockerfile en la carpeta del frontend
    build:
      context: ./repositories/stock-advisor-frontend
      dockerfile: Dockerfile
      args:
        # Pasar la URL de la API como argumento durante la construcción
        - VITE_API_BASE_URL=http://localhost:8080
    container_name: stock-advisor-frontend
    ports:
      - "5173:5173"  # Expone la UI en el puerto 5173
    environment:
      # Variables de entorno para el frontend (runtime)
      - VITE_API_BASE_URL=http://localhost:8080
      - VITE_DEFAULT_LANGUAGE=ES
    depends_on:
      # Solo inicia cuando el backend está disponible
      - backend
    networks:
      - stock-network
    restart: on-failure

# ==========================================================
# VOLÚMENES PERSISTENTES
# ==========================================================
volumes:
  # Volumen para datos de CockroachDB
  cockroach-data:
    # Volumen nombrado que persiste aún después de docker-compose down
    # (a menos que uses docker-compose down -v)
  
  # Volumen para certificados SSL/TLS
  cockroach-certs:

# ==========================================================
# REDES
# ==========================================================
networks:
  # Red para comunicación entre contenedores
  stock-network:
    driver: bridge