version: '3.8'

services:
  # ==========================================================
  # BASE DE DATOS: CockroachDB
  # ==========================================================
  cockroach:
    # Imagen oficial de CockroachDB con versión específica para estabilidad
    image: cockroachdb/cockroach:latest-v25.1
    container_name: cockroach
    ports:
      - "26257:26257"  # Puerto SQL para conexiones a la base de datos
      - "9090:9090"    # Puerto para la interfaz web de administración
    command: >
      start-single-node
      --advertise-addr=0.0.0.0
      --http-addr=0.0.0.0:9090
      --insecure
    volumes:
      # Volumen persistente para evitar pérdida de datos al reiniciar
      - cockroach-data:/cockroach/cockroach-data
    networks:
      - stock-network
    # Verificación de salud para que otros servicios sepan cuándo está listo
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # ==========================================================
  # INICIALIZACIÓN DE BASE DE DATOS
  # ==========================================================
  db-init:
    # Usamos la misma imagen pero solo para ejecutar comandos SQL
    image: cockroachdb/cockroach:latest-v25.1
    container_name: db-init
    depends_on:
      # Solo inicia cuando CockroachDB está saludable
      cockroach:
        condition: service_healthy
    networks:
      - stock-network
    # Comando para crear la base de datos si no existe
    command: >
      sql --insecure --host=cockroach --execute="CREATE DATABASE IF NOT EXISTS stock_db;"
    # Reintentar automáticamente si falla
    restart: on-failure

  # ==========================================================
  # BACKEND: API de Stock Advisor
  # ==========================================================
  backend:
    # Construye la imagen desde el Dockerfile en la carpeta del backend
    build:
      context: ./repositories/stock-advisor-backend
      dockerfile: Dockerfile
    container_name: stock-advisor-backend
    ports:
      - "8080:8080"  # Expone la API en el puerto 8080
    depends_on:
      # Solo inicia cuando la base de datos está inicializada
      db-init:
        condition: service_completed_successfully
    environment:
      # Variables de entorno para configurar el backend
      - ADDRESS=:8080
      - DATABASE_URL=postgresql://root@cockroach:26257/stock_db?sslmode=disable
      - STOCK_API_URL=https://8j5baasof2.execute-api.us-west-2.amazonaws.com/production/swechallenge/list
      - STOCK_AUTH_TKN=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdHRlbXB0cyI6MSwiZW1haWwiOiJsb2FpemFqdWxpYW4xOTk5QGdtYWlsLmNvbSIsImV4cCI6MTc0MTQ1Mjc0OCwiaWQiOiIwIiwicGFzc3dvcmQiOiInIE9SICcxJz0nMSJ9.adVaiW9LmcuxjPC4kclyMB7bjUZVKbJxmVj1qLobtLI
      - SYNC_MAX_ITERATIONS=100
      - SYNC_TIMEOUT=100
      # Orígenes permitidos para CORS (importante para comunicación con frontend)
      - CORS_ALLOWED_ORIGINS=http://localhost:5173,http://frontend:5173,http://127.0.0.1:5173
    networks:
      - stock-network
    restart: on-failure
    # Verificación de salud para el backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/swagger/index.html"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # ==========================================================
  # FRONTEND: Interfaz web de Stock Advisor
  # ==========================================================
  frontend:
    # Construye la imagen desde el Dockerfile en la carpeta del frontend
    build:
      context: ./repositories/stock-advisor-frontend
      dockerfile: Dockerfile
      args:
        # Pasar la URL de la API como argumento durante la construcción
        - VITE_API_BASE_URL=http://localhost:8080
    container_name: stock-advisor-frontend
    ports:
      - "5173:5173"  # Expone la UI en el puerto 5173
    environment:
      # Variables de entorno para el frontend (runtime)
      - VITE_API_BASE_URL=http://localhost:8080
      - VITE_DEFAULT_LANGUAGE=ES
    depends_on:
      # Solo inicia cuando el backend está disponible
      backend:
        condition: service_started
    networks:
      - stock-network
    restart: on-failure

# ==========================================================
# VOLÚMENES PERSISTENTES
# ==========================================================
volumes:
  # Volumen para datos de CockroachDB
  cockroach-data:
    # Volumen nombrado que persiste aún después de docker-compose down
    # (a menos que uses docker-compose down -v)

# ==========================================================
# REDES
# ==========================================================
networks:
  # Red para comunicación entre contenedores
  stock-network:
    driver: bridge